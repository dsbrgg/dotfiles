if empty(glob('~/.vim/autoload/plug.vim'))  
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'ayu-theme/ayu-vim'
Plug 'liuchengxu/space-vim-dark'
Plug 'NLKNguyen/papercolor-theme'
Plug 'scrooloose/nerdtree'
Plug 'Yggdroot/indentLine'
Plug 'elzr/vim-json'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'w0rp/ale'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/vim-gitbranch'
Plug 'itchyny/lightline.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'qpkorr/vim-renamer'
Plug 'camspiers/animate.vim'
Plug 'camspiers/lens.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

:let mapleader = " "

" use system's clipboard
set clipboard^=unnamed,unnamedplus
noremap <leader>y "*y
noremap <leader>p "*p
noremap <leader>Y "+y
noremap <leader>P "+p

" use relative number
set number relativenumber

" delete line/characters without copying to clipboard
" https://stackoverflow.com/questions/11993851/how-to-delete-not-cut-in-vim
nnoremap <leader>d "_d
xnoremap <leader>d "_d
xnoremap <leader>p "_dP

map <C-n> :NERDTreeToggle<CR>
map <C-m> :NERDTreeFocus<CR>

" ,t + arrow to move through vim tabhorizontals
map <leader>t<up> :tabr<CR>
map <leader>t<down> :tabl<CR>
map <leader>t<left> :tabp<CR>
map <leader>t<right> :tabn<CR>

" split screen with ,w + v(vertical) || s(horizontal)
nnoremap <leader>w <C-w>

autocmd BufEnter * lcd %:p:h

filetype plugin indent on

" Display all matching files when we tab complete
set wildmenu
set completeopt=longest,menuone

" When splitting, split to the right and below current split
set splitbelow splitright

set foldmethod=indent

set cmdheight=1
set linespace=0
set noshowmode

set history=500

" Automatically :write before running commands
set autowrite

" Make backspace act as it should
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

"Always show current position
set ruler

" Set 7 lines to the cursor - when moving vertically using j/k
set so=12

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Map , to / (search) and Ctrl-, to ? (backwards search)
map , /
map <C>, ?

" Always show the status line
set laststatus=2

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfun

if has("autocmd")
  autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

scriptencoding utf-8
set encoding=utf-8

set autoindent

set tabstop=2      
set shiftwidth=2   
set softtabstop=2
set expandtab
retab

set path+=**                                                                    
set wildignore+=**/node_modules/** 

" https://www.reddit.com/r/vim/comments/3ql651/what_do_you_set_your_updatetime_to/
set updatetime=100

" Send more characters for redraw
set ttyfast
set ttymouse=sgr

" Enable mouse
set mouse=a

highlight ALEError ctermbg=none ctermfg=none cterm=bold 
highlight ALEWarning ctermbg=none ctermfg=none cterm=bold
highlight SignColumn ctermbg=white    " terminal Vim
highlight Visual term=reverse cterm=none guibg=Grey

let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '--'
let g:gitgutter_sign_removed_first_line = '^^'
let g:gitgutter_sign_modified_removed = 'ww'

let g:NERDTreeDirArrows=0
"let g:NERDTreeWinSize=40

let g:ale_completion_enabled = 1
let b:ale_linters = ['eslint']
let g:ale_javascript_eslint_executable = 'npm run lint --'
let g:ale_set_hightlights = 0

let g:vim_json_syntax_concealcursor = ""

let g:lightline = {
  \ 'colorscheme': 'PaperColor',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name'
  \ },
  \ 'tabline': {
  \   'left': [ ['tabs'] ],
  \   'right': [ ['bufnum'] ]
  \ }, 
  \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
  \ }

let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-a>'
let g:multi_cursor_select_all_word_key = '<A-a>'
let g:multi_cursor_start_key           = 'g<C-a>'
let g:multi_cursor_select_all_key      = 'g<A-a>'
let g:multi_cursor_next_key            = '<C-a>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

let g:lens#width_resize_max = 50

" disable indentLines on NERDTree
let g:indentLine_fileTypeExclude = ['nerdtree']

let g:coc_global_extensions = [
	\ 'coc-css',
	\ 'coc-html',
	\ 'coc-json',
	\ 'coc-snippets',
	\ 'coc-tsserver',
  \ 'coc-css',
  \ 'coc-eslint',
  \ 'coc-git',
  \ 'coc-sh',
  \ 'coc-svelte',
  \ 'coc-rls',
  \ 'coc-python',
  \ 'coc-go',
  \ 'coc-markdownlint',
  \ 'coc-omnisharp',
\ ]

" Interpret .svelte syntax as .html files
au! BufNewFile,BufRead *.svelte set ft=html

set nobackup
set nowb
set noswapfile
set directory^=$HOME/.vim/tmp// " send swap files on .vim folder

set number

" Themes config

" space_vim_dask theme
"   Range:   233 (darkest) ~ 238 (lightest)
"   Default: 235
" let g:space_vim_dark_background = 235 

" sitruuna_fzf theme
" let g:sitruuna_fzf = 0

syntax on
set background=dark
colorscheme PaperColor 

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1,
  \       'allow_bold': 1,
  \       'allow_italic': 1
  \     }
  \   }
  \ }

hi Comment guifg=#5C6370 ctermfg=59 gui=italic cterm=italic

if &term =~ '^screen'
  " tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction
